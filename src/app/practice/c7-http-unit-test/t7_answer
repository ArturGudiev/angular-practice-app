import {TestBed} from '@angular/core/testing';

import {C7Service} from './c7.service';
import {C7BookInterface, C7BookTrackerError} from "./interfaces_and_constants";
import {HttpClientTestingModule, HttpTestingController, TestRequest} from "@angular/common/http/testing";

fdescribe('C7Service', () => {
  let c7Service: C7Service;
  let httpTestingController: HttpTestingController;

  let testBooks: C7BookInterface[] = [
    {title: 'book0', author: 'author0'},
    {title: 'book1', author: 'author1'},
    {title: 'book2', author: 'author2'},
  ];

  beforeEach(() => {

    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [C7Service]
    });

    c7Service = TestBed.inject(C7Service);
    httpTestingController = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpTestingController.verify();
  });

  it('should GET all books', () => {
    c7Service.getBooks()
      .subscribe((data: C7BookInterface[] | C7BookTrackerError) => {
        expect((<C7BookInterface[]>data).length).toBe(3);
      });

    let booksRequest: TestRequest = httpTestingController.expectOne('http://localhost:3030/books');
    expect(booksRequest.request.method).toEqual('GET');

    booksRequest.flush(testBooks);

  });

  it('should return a BookTrackerError', () => {
    c7Service.getBooksError()
      .subscribe({
          next: (data: C7BookInterface[] | C7BookTrackerError) => fail('this should have been an error'),
          error: (err: C7BookTrackerError) => {
            expect(err.errorNumber).toEqual(100);
            expect(err.friendlyMessage).toEqual('An error occurred retrieving data.');
          }
        }
      );

    let booksRequest: TestRequest = httpTestingController.expectOne('http://googl23');

    booksRequest.flush('error', {
      status: 500,
      statusText: 'Server Error'
    });

  });

});
